<?xml version="1.0" encoding="utf-8" ?>
<!--
设计说明：

	本脚本默认在 maven 环境下运行，也能够适应单独运行，但是需要外部的配置文件。运行的环境由脚本自动探测。

	脚本采用三个模型文件，存放在 src/main/model 下，文件名格式必须为 *.vo.jdl/*.bo.jdl/*.po.jdl 三种，
	分别对应 VO，BO和PO 对象。 在maven编译之前的 generate-source 阶段运行，代码的生成位置在 target 下，
	用同名的目录 vo，bo，po 分别对应三个不同的分层。三个分层使用的 jdl文件会在使用前复制到 target／vo|po|bo
    工程的 src/main/model/ 下。还会创建 node_modules 的目录链接，避免下载过多的软件。
	生成三个层次的工程代码之后，脚本会将这三个目录中的生成的代码内容复制到本目录之下，并组装这些代码。

	脚本会使用如下的属性变量，在maven环境下运行会自动生成这些属性值，非maven环境下从 powergen.properties 中获取：
		project_name 工程的名字， 默认是 project.artifactId
		project_package 工程的命名空间，默认是 project.groupId + project.artifactId
		source_output_dir 存放生成代码的目录位置，默认是 src/main/java 
		model_input_dir  存放 jdl 文件的目录位置，默认是 src/main/model
	
	代码分 环境设置 setenv， 工具类 tool，代码生成 gen几个部分，分别用相应的前缀作为 target的名字。
-->
<project name="powergen">

	<target name="setenv.taskdef" depends="setenv.taskdef.maven, setenv.taskdef.ant">
	</target>

	<target name="setenv.taskdef.maven" if="is-in-maven">
		<!-- 装入antlib库 -->
		<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${plugin_classpath}"/>
	</target>

	<target name="setenv.taskdef.ant" unless="is-in-maven">
		<!-- 装入antlib库 -->
		<taskdef resource="net/sf/antcontrib/antlib.xml" />
	</target>

	<target name="setenv.detect">
		<condition property="is-in-maven">
			<isset property="maven.plugin.classpath" />
		</condition>

		<condition property="is-windows-os">
			<os family="windows"/>
		</condition>
	</target>

	<!-- 设置系统变量的默认值 -->
	<target name="setenv.vars" depends="setenv.vars.defs, setenv.vars.maven, setenv.vars.ant, setenv.vars.check, setenv.vars.assert">
		<echo message="log level         =${loglevel}" />
		<echo message="project name      =${project_name}" />
		<echo message="project package   =${project_package}" />
		<echo message="source output dir =${source_output_dir}" />
		<echo message="model input dir   =${model_input_dir}" />
	</target>

	<target name="setenv.vars.defs">
		<property name="loglevel" value="error" />
	</target>

	<target name="setenv.vars.maven" if="is-in-maven">
		<property name="project_name" value="${project.artifactId}" />
		<propertyregex property="project_package"
              input="${project.groupId}.${artifactId}"
              regexp="\-"
              replace="_"
              casesensitive="false" />
		<property name="source_output_dir" value="src/main/java" />
		<property name="model_input_dir" value="src/main/model" />

		<property name="plugin_classpath" refid="maven.plugin.classpath" />
	</target>

	<target name="setenv.vars.ant" unless="is-in-maven">
		<property file="${basedir}/powergen.properties" />
	</target>

	<target name="setenv.vars.check">
		<condition name="vars_valid">
			<available dir="${source_output_dir}" type="dir" />
			<available dir="${model_input_dir}" type="dir" />
		</condition>
	</target>

	<target name="setenv.vars.assert" unless="vars_valid">
		<fail message="vars definition invalid" />
	</target>

	<target name="setenv.options">
		<!-- 记录日志 -->
		<record name="${basedir}/target/logs/generate.log" loglevel="${loglevel}" action="start"/>
	</target>

	<target name="setenv" depends="setenv.vars, setenv.detect, setenv.options, setenv.taskdef">
	</target>

	<target name="show-help" >
		<echo message="============= HELP ================="/>
		<echo message="命令行参数控制: "/>
		<echo message="-Dskip-build=true     跳过 vo, bo, po 的构建"/>
		<echo message="-Dskip-build-vo=true  跳过 vo 的构建"/>
		<echo message="-Dskip-build-po=true  跳过 po 的构建"/>
		<echo message="-Dskip-build-bo=true  跳过 bo 的构建"/>
		<echo message="-Dskip-save-jh=true   跳过 jh 的同步"/>
    </target>


    <target name="set-model-dir" >
        <if>
            <istrue value="${model-dir-exists}" />
            <then>
                <property name="model-dir" value="${basedir}/src/main/model" />
            </then>
            <else>
                <property name="model-dir" value="${basedir}" />
                <property name="model-dir-target" value="${basedir}/src/main/model" />
            </else>
        </if>
    </target>

    <target name="load-properties" depends="set-model-dir" >
        <if>
            <available file="${model-dir}/generate.properties"/>
            <then>
	            <property file="${model-dir}/generate.properties"/>
	        </then>
	        <else>
	            <fail message="require generate.properties"/>
	        </else>
	    </if>
	</target>


	<!-- - - - - - - - - - - - - - - - - -
          target: check-vbp-o-projects 检查并创建三个目标工程目录
         - - - - - - - - - - - - - - - - - -->
    <target name="check-vbp-o-projects" depends="search-node-modules-dir" >
    	<!-- 先给basedir链接一个 node-module -->
    	<antcall target="link-node-module" inheritAll="false">
			<param name="proj-dir" value="${basedir}"/>
			<param name="nmdir" value="${node-modules-dir}"/>
		</antcall>
    	<!-- 给其他工程建目录 -->
    	<for list="vo,bo,po" param="proj" delimiter="," trim="true" >
    		<sequential>
    			<!-- 生成工程 -->
    			<antcall target="check-project" inheritAll="false">
		    		<param name="proj-dir" value="${@{proj}-project}"/>
		    		<param name="jh-file" value="@{proj}.jh"/>
		    		<param name="nmdir" value="${node-modules-dir}"/>
		    	</antcall>
    		</sequential>
    	</for>
    </target>

    <target name="search-node-modules-dir">
    	<var name="curdir" value="${basedir}" />
		<for list="1,2,3,4,5" param="level" delimiter="," trim="true" >
			<sequential>
				<if>
					<not><isset property="node-modules-dir"/></not>
					<then>
						<echo>search node_modules in ${curdir}</echo>
						<first id="dir-@{level}" >
							<sort>
								<dirset dir="${curdir}" >
									<and>
										<filename name="**/node_modules" />
										<scriptselector language="javascript">
											var sel = /[\\/]node_modules$/.test(filename) == true &amp;&amp;
													  /[\\/]node_modules[\\/]/.test(filename) == false;
											self.setSelected(sel);
										</scriptselector>
									</and>
								</dirset>
								<name />
							</sort>
						</first>

						<property name="nmdir-@{level}" refid="dir-@{level}"  />

						<if>
							<and>
								<not><equals arg1="${nmdir-@{level}}" arg2="" /></not>
								<available file="${nmdir-@{level}}" type="dir" />
							</and>
							<then>
								<property name="node-modules-dir" value="${nmdir-@{level}}"/>
								<echo message="... node_modules found ${nmdir-@{level}}" />
							</then>
							<else>
								<echo message="... node_modules not found!" />
							</else>
						</if>
					</then>
				</if>
				<var name="curdir" value="${curdir}/.." />
	  		</sequential>
		</for>
    </target>

	<!-- 参数：proj-dir=要复制的目标文件夹，jh-file=写入的jh文件名 -->
	<target name="check-project" >
		<echo>checking project ${proj-dir} ...</echo>
		<!-- 创建目录，如果存在则忽略，然后复制pom.xml，.yo-rc.json， jh文件 -->
		<mkdir dir="${proj-dir}" />
		<copy file="${basedir}/.yo-rc.json" tofile="${proj-dir}/.yo-rc.json" overwrite="false"  preservelastmodified="true" />
		<copy file="${basedir}/src/main/jh/${jh-file}" tofile="${proj-dir}/${jh-file}" overwrite="false" preservelastmodified="true" />
		<!-- 链接 node-modules -->
		<antcall target="link-node-module" inheritAll="false">
    		<param name="proj-dir" value="${proj-dir}"/>
    		<param name="nmdir" value="${nmdir}"/>
    	</antcall>
	</target>

	<target name="link-node-module" >
		<!-- 如果当前不存在，则寻找 node_modules 将其 link 到目标目录 -->
		<if>
			<not><available file="${proj-dir}/node_modules" type="dir" /></not>
			<then>
				<if>
					<not><equals arg1="${nmdir}" arg2="" /></not>
					<then>
						<echo message="... linking ${nmdir} ..." />
						<pathconvert property="local-dir" targetos="windows" >
						    <path location="${nmdir}" />
						</pathconvert>
						<exec dir="${proj-dir}" executable="cmd.exe" osfamily="windows" failonerror="true" >
				  		  	<arg line='/c mklink /j node_modules "${local-dir}" ' />
				  		</exec>
				  		<exec dir="${proj-dir}" executable="/bin/ln" osfamily="unix" failonerror="true" >
				  		  	<arg line="-s ${nmdir} node_modules"/>
				  		</exec>
					</then>
					<else>
						<echo message="... node_modules not found!" />
					</else>
				</if>
			</then>
		</if>
	</target>

	<target name="save-new-jh" unless="skip-save-jh" >
		<for list="vo,bo,po" param="proj" delimiter="," trim="true" >
    		<sequential>
    			<copy file="${@{proj}-project}/@{proj}.jh" tofile="${basedir}/src/main/jh/@{proj}.jh" overwrite="false" preservelastmodified="true" />
    		</sequential>
    	</for>
	</target>

	<target name="build-vbp-projects" unless="skip-build" >
		<for list="vo,bo,po" param="proj" delimiter="," trim="true" >
    		<sequential>
    			<if>
    				<not> <isset property="skip-build-@{proj}" /> </not>
    				<then>
    					<!-- 只有没设置 skip-build-XX 的时候才运行 -->
		    			<if>
		    				<istrue value="${isWin}" />
		    				<then>
								<pathconvert property="proj-dir-@{proj}" targetos="windows" >
								    <path location="${@{proj}-project}" />
								</pathconvert>
				    			<echo message="... building ${proj-dir-@{proj}} ..." />
								<shellscript shell="cmd.exe" tmpsuffix=".bat" dir="${proj-dir-@{proj}}" osfamily="windows" failonerror="true" >
									<arg value="/c"/>
									<arg value="call"/>
									yo jhipster
									if "%errorlevel%" == "0" yo jhipster:import-jdl @{proj}.jh
						  		</shellscript>
		    				</then>
		    				<else>
		    					<echo message="... building ${@{proj}-project} ..." />
						  		<shellscript shell="bash" dir="${@{proj}-project}" osfamily="unix" failonerror="true" >
						  			yo jhipster
						  			if [ "$?" -eq "0" ]
						  			then
						  				yo jhipster:import-jdl @{proj}.jh
						  			fi
						  		</shellscript>
		    				</else>
		    			</if>
    				</then>
    			</if>
    		</sequential>
    	</for>
	</target>

	<target name="copysource" depends="require-properties,show-help,check-vbp-o-projects,save-new-jh,build-vbp-projects" >
		<echo message="========= 替换源文件开始 ======== " />
		<echo message="引入文件"/>
		<copy todir="${project_path}/target/tmp/src/main/webapp">
			<fileset dir="${vo-project}/src/main/webapp" />
		</copy>
		<copy todir="${project_path}/target/tmp/src/main/java/com/apusic/aip/web/rest">
			<fileset dir="${vo-project}/src/main/java/com/apusic/aip/web/rest" />
		</copy>
		<copy todir="${project_path}/target/tmp/src/main/java/com/apusic/aip/domain" overwrite="true" force="true" preservelastmodified="true">
			<fileset dir="${bo-project}/src/main/java/com/apusic/aip/domain" />
			<fileset dir="${po-project}/src/main/java/com/apusic/aip/domain" />
		</copy>
		<copy todir="${project_path}/target/tmp/src/main/java/com/apusic/aip/repository" overwrite="true" force="true" preservelastmodified="true">
			<fileset dir="${po-project}/src/main/java/com/apusic/aip/repository" />
		</copy>
		<copy todir="${project_path}/target/tmp/src/main/java/com/apusic/aip" overwrite="true" force="true" preservelastmodified="true">
			<fileset dir="${vo-project}/src/main/java/com/apusic/aip/">
				<include name="service/*"/>
				<include name="service/dto/"/>
				<include name="service/impl/"/>
				<include name="service/mapper/"/>
			</fileset>
			<fileset dir="${bo-project}/src/main/java/com/apusic/aip/">
				<include name="service/*"/>
				<include name="service/impl/"/>
				<include name="service/mapper/"/>
			</fileset>
		</copy>
		<copy todir="${project_path}/target/tmp/src/main/resources/config">
			<fileset dir="${po-project}/src/main/resources/config" />
		</copy>
		<echo message="引入文件结束"/>
		<echo message="备份文件开始"/>
		<copy todir="${project_path}/target/vo-translate-bak/webapp" overwrite="true">
			<fileset dir="${project_path}/target/tmp/src/main/webapp" />
		</copy>
		<copy todir="${project_path}/target/vo-translate-bak/rest" overwrite="true">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/web/rest" />
		</copy>
		<copy todir="${project_path}/target/vo-translate-bak/domain" overwrite="true">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/domain" />
		</copy>
		<copy todir="${project_path}/target/vo-translate-bak/repository" overwrite="true">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/repository" />
		</copy>
		<copy todir="${project_path}/target/vo-translate-bak/service" overwrite="true">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service" />
		</copy>
		<echo message="备份文件结束"/>
		<!-- VO Service层转换 -->
		<!-- *VORepository -> *BOService -->
		<replaceregexp  match="(\w*)VORepository" replace="\1BOService" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/impl" includes="*VOServiceImpl.java" />
		</replaceregexp>
		<!-- *VO -> *BO -->
		<replaceregexp  match="(\w+)VO(.?\s|\))" replace="\1BO\2" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/impl" includes="*VOServiceImpl.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*VOMapper.java" />
		</replaceregexp>
		<!-- *VO(S)TO -> *BO(S)TO -->
		<replaceregexp  match="(\w+)VO(S?TO)" replace="\1BO\2" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/impl" includes="*VOServiceImpl.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*VOMapper.java" />
		</replaceregexp>
		<!-- *VO(S)( -> *BO(S)( -->
		<replaceregexp  match="(\w+)VO(S?\()" replace="\1BO\2" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/impl" includes="*VOServiceImpl.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*VOMapper.java" />
		</replaceregexp>
		<!-- *VO(S)) -> *BO(S)) -->
		<replaceregexp  match="(\w+)VO(S?\))" replace="\1BO\2" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*VOMapper.java" />
		</replaceregexp>
		<!-- public interface *Mapper -> public abstract class *Mapper -->
		<replaceregexp  match="interface" replace="abstract\sclass" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*VOMapper.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*BOMapper.java" />
		</replaceregexp>
		<!-- *Mapper -> public abstract *Mapper -->
		<replaceregexp  match="(^\s*)((\w+)(\W[^\>]*\>)?\s+(\w+)\()" replace="\1public\sabstract\s\2 " flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*VOMapper.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*BOMapper.java" />
		</replaceregexp>
		<!-- import *VORepository -> *BOService-->
		<replaceregexp  match="aip.repository" replace="aip.service" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/impl" includes="*VOServiceImpl.java" />
		</replaceregexp>
		<!-- BO Service层转换 -->
		<!-- *BORepository -> *PORepository -->
		<replaceregexp  match="(\w+)BORepository" replace="\1PORepository" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/impl" includes="*BOServiceImpl.java" />
		</replaceregexp>
		<!-- *BO -> *PO -->
		<replaceregexp  match="(\w+)BO(.?\s|\))" replace="\1PO\2" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/impl" includes="*BOServiceImpl.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*BOMapper.java" />
		</replaceregexp>
		<!-- import *DTO -> *BO-->
		<replaceregexp  match="service.dto" replace="domain" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/impl" includes="*BOServiceImpl.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service" includes="*BOService.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*BOMapper.java" />
		</replaceregexp>
		<!-- *BODTO -> *BO -->
		<replaceregexp  match="(\w*)BODTO(.?\)?;?\s?)" replace="\1BO\2" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service" includes="*BOService.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/impl" includes="*BOServiceImpl.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*BOMapper.java" />
		</replaceregexp>
		<!-- *BO(S)TO -> *PO(S)TO -->
		<replaceregexp  match="(\w+)BO(S?TO)" replace="\1PO\2" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/impl" includes="*BOServiceImpl.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*BOMapper.java" />
		</replaceregexp>
		<!-- *BO(S)( -> *PO(S)( -->
		<replaceregexp  match="(\w+)BO(S?\()" replace="\1PO\2" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/impl" includes="*BOServiceImpl.java" />
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*BOMapper.java" />
		</replaceregexp>
		<!-- *BO(S)) -> *PO(S)) -->
		<replaceregexp  match="(\w+)BO(S?\))" replace="\1PO\2" flags="g">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service/mapper" includes="*BOMapper.java" />
		</replaceregexp>
		<echo message="将替换好的文件放入工程开始"/>
		<copy todir="src/main/webapp" overwrite="true">
			<fileset dir="${project_path}/target/tmp/src/main/webapp" />
		</copy>
		<copy todir="src/main/java/com/apusic/aip/web/rest" overwrite="true">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/web/rest" />
		</copy>
		<copy todir="src/main/java/com/apusic/aip/domain" overwrite="true">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/domain" />
		</copy>
		<copy todir="src/main/java/com/apusic/aip/repository" overwrite="true">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/repository" />
		</copy>
		<copy todir="src/main/java/com/apusic/aip/service" overwrite="true">
			<fileset dir="${project_path}/target/tmp/src/main/java/com/apusic/aip/service" />
		</copy>
		<copy todir="src/main/resources/config" overwrite="true" force="true">
			<fileset dir="${project_path}/target/tmp/src/main/resources/config" />
		</copy>
		<echo message="将替换好的文件放入工程开始结束"/>
	</target>
</project>
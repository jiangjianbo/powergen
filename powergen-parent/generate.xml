<?xml version="1.0" encoding="utf-8" ?>
<!--
设计说明：

	本脚本默认在 maven 环境下运行，也能够适应单独运行，但是需要外部的配置文件。运行的环境由脚本自动探测。

	脚本采用三个模型文件，存放在 src/main/model 下，文件名格式必须为 *.vo.jdl/*.bo.jdl/*.po.jdl 三种，
	分别对应 VO，BO和PO 对象。 在maven编译之前的 generate-source 阶段运行，代码的生成位置在 target 下，
	用同名的目录 vo，bo，po 分别对应三个不同的分层。三个分层使用的 jdl文件会在使用前复制到 target／vo|po|bo
    工程的 src/main/model/ 下。还会创建 node_modules 的目录链接，避免下载过多的软件。
	生成三个层次的工程代码之后，脚本会将这三个目录中的生成的代码内容复制到本目录之下，并组装这些代码。

	脚本会使用如下的属性变量，在maven环境下运行会自动生成这些属性值，非maven环境下从 powergen.properties 中获取：
		project_name     工程的名字， 默认是 project.artifactId
		project_package  工程的命名空间，默认是 project.groupId 
		project_dir      工程根目录，默认是 pom.xml 的目录
		output_dir       输出目录位置，存放各种中间状态的输出，默认是 target
		source_merge_dir 生成的代码最终合并到的目录位置，默认是 src/main/java 
		model_dir        存放 jdl 文件的目录位置，默认是 src/main/model
	
	代码分为： 环境设置 setenv， 工具类 tool，代码生成 gen几个部分，分别用相应的前缀作为 target的名字。
-->
<project name="powergen">

    <target name="setenv.taskdef" depends="setenv.detect.sys, setenv.taskdef.maven, setenv.taskdef.ant">
    </target>

    <target name="setenv.taskdef.maven" if="${is-in-maven}">
        <property name="plugin_classpath" refid="maven.plugin.classpath" />
        <!-- 装入antlib库 -->
        <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${plugin_classpath}" />
    </target>

    <target name="setenv.taskdef.ant" unless="is-in-maven">
        <!-- 装入antlib库 -->
        <taskdef resource="net/sf/antcontrib/antlib.xml" />
    </target>

    <target name="setenv.detect.sys">
        <condition property="is-in-maven">
            <isset property="maven.project.artifactId" />
        </condition>

        <condition property="is-windows-os">
            <os family="windows" />
        </condition>
    </target>

    <target name="setenv.detect.project">
        <condition property="has-yo_rc">
            <available file="${basedir}/.yo-rc.json" />
        </condition>
        <condition property="has-inited">
            <available file="${basedir}/mvnw" />
        </condition>
        <condition property="has-modules">
            <available file="${basedir}/node_modules" type="dir" />
        </condition>
    </target>

    <!-- 设置系统变量的默认值 -->
    <target name="setenv.vars"
            depends="setenv.vars.defs, setenv.vars.maven, setenv.vars.ant, setenv.vars.check, setenv.vars.assert">
        <propertyregex property="project_package_dir"
                       input="${project_package}"
                       regexp="\."
                       replace="/"
                       global="true"
                       defaultValue="${project_package}" />

        <echo message="log level         = ${loglevel}" />
        <echo message="project name      = ${project_name}" />
        <echo message="project package   = ${project_package}" />
        <echo message="project root      = ${project_dir}" />
        <echo message="source merge dir  = ${source_merge_dir}" />
        <echo message="model input dir   = ${model_dir}" />
        <echo message="output dir        = ${output_dir}" />
        <echo message="package dir       = ${project_package_dir}" />
        <echo>---------</echo>
        <echo message="clean-gen-source  = ${clean-gen-source}" />
        <echo message="skip-build        = ${skip-build}" />
        <echo message="skip-build-vo     = ${skip-build-vo}" />
        <echo message="skip-build-bo     = ${skip-build-bo}" />
        <echo message="skip-build-po     = ${skip-build-po}" />
        <echo>---------</echo>
        <echo message="force-build       = ${force-build}" />
        <echo message="force-build-vo    = ${force-build-vo}" />
        <echo message="force-build-bo    = ${force-build-bo}" />
        <echo message="force-build-po    = ${force-build-po}" />
        <echo>---------</echo>
        <echo message="skip-gen          = ${skip-gen}" />
        <echo message="skip-gen-vo       = ${skip-gen-vo}" />
        <echo message="skip-gen-bo       = ${skip-gen-bo}" />
        <echo message="skip-gen-po       = ${skip-gen-po}" />
    </target>

    <target name="setenv.vars.defs">
        <property name="loglevel" value="debug" />

        <property environment="env" />

        <property name="clean-gen-source" value="false" />
        
        <property name="skip-build" value="false" />
        <property name="skip-build-vo" value="false" />
        <property name="skip-build-bo" value="false" />
        <property name="skip-build-po" value="false" />

        <property name="force-build" value="false" />
        <property name="force-build-vo" value="false" />
        <property name="force-build-bo" value="false" />
        <property name="force-build-po" value="false" />

        <property name="skip-gen" value="false" />
        <property name="skip-gen-vo" value="false" />
        <property name="skip-gen-bo" value="false" />
        <property name="skip-gen-po" value="false" />
    </target>

    <target name="setenv.options">
        <!-- 记录日志 error|warn|info|verbose|debug -->
        <record name="${basedir}/target/logs/generate.log" loglevel="${loglevel}" action="start" />
    </target>

    <target name="setenv.vars.maven" if="${is-in-maven}" depends="setenv.detect.sys, setenv.taskdef">
        <property name="project_name" value="${maven.project.artifactId}" />

        <propertyregex property="project_package"
                       input="${maven.project.groupId}"
                       regexp="\-"
                       replace="_"
                       global="true"
                       defaultValue="${maven.project.groupId}" />

        <property name="project_dir" value="${basedir}" />
        <property name="output_dir" value="${basedir}/target" />
        <property name="source_merge_dir" value="${basedir}/src" />
        <property name="model_dir" value="${basedir}/src/main/model" />

    </target>

    <target name="setenv.vars.ant" unless="is-in-maven" depends="setenv.detect.sys">
        <property file="${basedir}/generate.properties" />
    </target>

    <target name="setenv.vars.check">
        <mkdir dir="${output_dir}/logs" />
        <condition property="vars_valid">
            <and>
                <available file="${project_dir}" type="dir" />
                <available file="${output_dir}" type="dir" />
                <available file="${source_merge_dir}" type="dir" />
                <available file="${model_dir}" type="dir" />
            </and>
        </condition>
    </target>

    <target name="setenv.vars.assert" unless="vars_valid">
        <fail message="vars definition invalid" />
    </target>

    <target name="setenv"
            depends="setenv.detect.sys, setenv.vars, setenv.options, setenv.taskdef, setenv.detect.project">
    </target>

    <target name="show-help">
        <echo message="============= HELP =================" />
        <echo message="命令行参数控制: " />
        <echo message="-Dskip-build=true     跳过 vo, bo, po 的构建" />
        <echo message="-Dskip-build-vo=true  跳过 vo 的构建" />
        <echo message="-Dskip-build-po=true  跳过 po 的构建" />
        <echo message="-Dskip-build-bo=true  跳过 bo 的构建" />
        <echo message="-Dforce-build=true     强制 vo, bo, po 的构建" />
        <echo message="-Dforce-build-vo=true  强制 vo 的构建" />
        <echo message="-Dforce-build-po=true  强制 po 的构建" />
        <echo message="-Dforce-build-bo=true  强制 bo 的构建" />
        <echo message="-Dskip-gen=true     跳过 vo, bo, po 的代码生成" />
        <echo message="-Dskip-gen-vo=true  跳过 vo 的代码生成" />
        <echo message="-Dskip-gen-po=true  跳过 po 的代码生成" />
        <echo message="-Dskip-gen-bo=true  跳过 bo 的代码生成" />
    </target>

    <target name="clean" depends="setenv">
        <echo>clean generated sources in src/ directory by -Dpowergen.fullclean=true</echo>
        <echo>clean above and node_modules/ by -Dpowergen.deepclean=true</echo>
        <!-- if -Dpowergen.fullclean=true then clear copied source -->
        <if>
            <or>
                <istrue value="${powergen.fullclean}" />
                <istrue value="${powergen.deepclean}" />
            </or>
            <then>
                <var name="gen.clean-gen" value="true"/>
                <antcall target="gen.clean-gen">
                </antcall>
                <!-- 删除 node-modules -->
                <if>
                    <istrue value="${powergen.deepclean}" />
                    <then>
                        <antcall target="tool.removelink">
                            <param name="from.dir" value="${project_dir}/node_modules" />
                        </antcall>
                        <delete quiet="false" failonerror="false" verbose="false" removeNotFollowedSymlinks="true" includeemptydirs="true" >
                            <fileset dir="${project_dir}" defaultexcludes="no" >
                                <include name="node_modules/**/*" />
                            </fileset>
                        </delete>
                        <delete quiet="false" failonerror="false" verbose="false" removeNotFollowedSymlinks="true" includeemptydirs="true" >
                            <dirset dir="${project_dir}" defaultexcludes="no" >
                                <include name="node_modules/**" />
                            </dirset>
                        </delete>
                    </then>
                </if>
            </then>
        </if>
                
    </target>    
    
    <!-- 先清除复制到src中的源代码 -->
    <target name="gen.clean-gen" if="${clean-gen-source}">
        <echo>cleaning generated files in src/ ... </echo>
        <delete quiet="false" failonerror="false" verbose="true" removeNotFollowedSymlinks="true" >
            <fileset dir="${project_dir}" followsymlinks="false" >
                <include name="*.*" />
                <include name="*" />
                <include name="**/*" />
                <include name="**/*.*" />
                <exclude name="node_modules/**/*" />
                <exclude name="node_modules/**/*.*" />
                <exclude name="node_modules/**/.*" />
                <exclude name="pom.xml" />
                <exclude name="generate.properties" />
                <exclude name=".yo-rc.json" />
                <exclude name="src/main/model/**/*" />
                <exclude name="src/main/model/**/*.*" />
                <exclude name="target/**/*" />
                <exclude name=".idea/**/*" />
                <exclude name="*.iml" />
                <exclude name=".settings/**/*" />
                <exclude name="*.project" />
                <exclude name="*.classpath" />
            </fileset>
        </delete>
        <delete quiet="false" failonerror="false" verbose="true" removeNotFollowedSymlinks="true" includeemptydirs="true" >
            <dirset dir="${project_dir}" defaultexcludes="no" >
                <include name="*" />
                <include name="*.*" />
                <include name="**" />
                <exclude name="node_modules/**" />
                <exclude name="src/main/model/**" />
                <exclude name="target" />
                <exclude name=".idea" />
                <exclude name=".settings" />
            </dirset>
        </delete>
    </target>
    
    <target name="generate" depends="setenv, gen.mkdir, gen.yo_rc, gen.init, gen.clean-gen">
        <echo message="generate ..." />

        <for list="vo,bo,po" param="layer">
            <sequential>
                <var name="target_layer" value="@{layer}" />
                <var name="is_@{layer}" value="true" />
                <if>
                    <or>
                        <!-- 如果有强迫生成 -->
                        <istrue value="${force-build}" />
                        <istrue value="${force-build-@{layer}}" />
                        <and>
                            <!-- 没有设置各种跳过 -->
                            <isfalse value="${skip-build}" />
                            <isfalse value="${skip-build-@{layer}}" />
                            <!-- target中jdl文件存在而且model里的jdl更加新 -->
                            <or>
                                <not>
                                    <available file="${output_dir}/${target_layer}/${project_name}.${target_layer}.jdl" />
                                </not>
                                <!-- 如果model中文件比target里的新 -->
                                <uptodate targetfile="${model_dir}/${project_name}.${target_layer}.jdl"
                                          srcfile="${output_dir}/${target_layer}/${project_name}.${target_layer}.jdl" />
                            </or>
                        </and>
                    </or>
                    <then>
                        <var name="can_gen" value="true" />
                        <if>
                            <or>
                                <istrue value="${skip-gen}" />
                                <istrue value="${skip-gen-@{layer}}" />
                            </or>
                            <then>
                                <echo>ignore generate @{layer} when skip-gen=${skip-gen} or skip-gen-@{layer}=${skip-gen-@{layer}}</echo>
                                <var name="can_gen" value="false" />
                            </then>
                        </if>
                        <!-- 依次处理每一个层 -->
                        <echo>starting generating @{layer}: is_@{layer}=${is_@{layer}} ...</echo>

                        <antcall target="gen.layer">
                        </antcall>

                        <var name="can_gen" value="false" />
                        <var name="is_@{layer}" value="false" />
                        <echo>finish generating @{layer}: is_@{layer}=${is_@{layer}} ...</echo>
                    </then>
                </if>
                <var name="is_@{layer}" value="false" />
            </sequential>
        </for>

        <antcall target="gen.improve">
        </antcall>

        <echo message="generate OK!" />
    </target>

    <target name="gen.yo_rc" unless="has-yo_rc">
        <echo file="${project_dir}/.yo-rc.json" append="false">{
  "generator-jhipster": {
    "promptValues": {
      "packageName": "${project_package}",
      "nativeLanguage": "en"
    },
    "jhipsterVersion": "4.5.2",
    "baseName": "${project_name}",
    "packageName": "${project_package}",
    "packageFolder": "${project_package_dir}",
    "serverPort": "8080",
    "authenticationType": "session",
    "hibernateCache": "ehcache",
    "clusteredHttpSession": false,
    "websocket": false,
    "databaseType": "sql",
    "devDatabaseType": "h2Disk",
    "prodDatabaseType": "mysql",
    "searchEngine": false,
    "messageBroker": false,
    "serviceDiscoveryType": false,
    "buildTool": "maven",
    "enableSocialSignIn": false,
    "rememberMeKey": "e832ea76e42281686f61160e8e37d3b5c9707a64",
    "clientFramework": "angular1",
    "useSass": false,
    "clientPackageManager": "yarn",
    "applicationType": "monolith",
    "testFrameworks": [],
    "jhiPrefix": "jhi",
    "enableTranslation": true,
    "nativeLanguage": "en",
    "languages": [
      "en",
      "zh-cn"
    ]
  }
}
		</echo>
    </target>

    <target name="gen.init" unless="has-inited">

    </target>

    <target name="gen.mkdir">
        <mkdir dir="${output_dir}" />

        <property name="vo_dir" value="${output_dir}/vo" />
        <property name="bo_dir" value="${output_dir}/bo" />
        <property name="po_dir" value="${output_dir}/po" />

        <property name="packagename.vo" value="view" />
        <property name="packagename.bo" value="business" />
        <property name="packagename.po" value="po" />

        <mkdir dir="${vo_dir}" />
        <mkdir dir="${bo_dir}" />
        <mkdir dir="${po_dir}" />
    </target>

    <!-- 所有 gen. 开头的都依赖于 target_layer 属性 -->
    <target name="gen.layer" depends="gen.copy, gen.build, gen.merge, gen.fix">

    </target>

    <target name="gen.copy" if="${can_gen}">
        <!-- 复制当前工程的基本配置文件 -->
        <echo>coping yo-rc</echo>
        <copy file="${project_dir}/.yo-rc.json" todir="${output_dir}/${target_layer}" overwrite="true" />
        <!-- 复制 jdl 文件，除了生成 base 结构 -->
        
        <echo>copy ${project_name}.${target_layer}.jdl </echo>
        <copy file="${model_dir}/${project_name}.${target_layer}.jdl"
              tofile="${output_dir}/${target_layer}/${project_name}.${target_layer}.jdl"
              overwrite="true" />
        <!-- 让不同的层生成内容在不同的命名空间中 -->
        <propertycopy name="layer_ns" from="packagename.${target_layer}" />
        <replace file="${output_dir}/${target_layer}/.yo-rc.json"
                 token="${project_package}"
                 value="${project_package}.${layer_ns}" />
        <replace file="${output_dir}/${target_layer}/.yo-rc.json"
                 token="${project_package_dir}"
                 value="${project_package_dir}/${layer_ns}" />

        <if>
            <not>
                <available file="${output_dir}/${target_layer}/node_modules" type="dir" />
            </not>
            <then>
                <echo>linking node_modules</echo>
                <!-- 准备链接 node_modules -->
                <antcall target="tool.link">
                    <param name="from.dir" value="${project_dir}/node_modules" />
                    <param name="to.link" value="${output_dir}/${target_layer}/node_modules" />
                </antcall>
            </then>
        </if>
    </target>

    <target name="gen.build" if="${can_gen}">
        <!-- 只有没设置 skip-build-XX 的时候才运行 -->
        <for list="${target_layer}" param="proj">
            <sequential>
                <if>
                    <istrue value="${is-windows-os}" />
                    <then>
                        <pathconvert property="proj-dir-@{proj}" targetos="windows">
                            <path location="${output_dir}/${target_layer}" />
                        </pathconvert>
                        <echo message="... building ${proj-dir-@{proj}} ..." />
                        <shellscript shell="cmd.exe"
                                     tmpsuffix=".bat"
                                     dir="${proj-dir-@{proj}}"
                                     osfamily="windows"
                                     failonerror="true">
                            <arg value="/c" />
                            <arg value="call" />
							yo jhipster --force
							if "%errorlevel%" == "0" (
                                if not exist "${proj-dir-@{proj}}\src" echo "======src not generated======" &amp;&amp; exit 1
							    if exist "${project_name}.@{proj}.jdl" (    
							        echo ================generate from ${project_name}.@{proj}.jdl======================
							        yo jhipster:import-jdl ${project_name}.@{proj}.jdl --force
							    )
							) else (
                                echo "======src not generated======" &amp;&amp; exit 1
                            )
						</shellscript>
                    </then>
                    <else>
                        <echo message="... building @{proj} ..." />
                        <shellscript shell="bash"
                                     dir="${output_dir}/${target_layer}"
                                     osfamily="unix"
                                     failonerror="true">
							yo jhipster --force
							if [ "$?" -eq "0"  -a  -f "${project_name}.@{proj}.jdl" ]
							then
                                [ ! -d "${output_dir}/${target_layer}/src" ] &amp;&amp; echo "=====[${output_dir}/${target_layer}/src] not generated======" &amp;&amp; exit 1
							    echo "================generate from ${project_name}.@{proj}.jdl======================"
								yo jhipster:import-jdl ${project_name}.@{proj}.jdl --force
							fi
						</shellscript>
                    </else>
                </if>
                <echo>building filished!</echo>
            </sequential>
        </for>

        <if>
            <istrue value="${is_vo}" />
            <then>
                <antcall target="gen.vo.post-gen">
                </antcall>
            </then>
        </if>
    </target>

    <target name="gen.vo.post-gen">
        <!-- 判断是否存在project目录的 node_modules,如果没有则移动一个，且为 vo 建立 link -->
        <if>
            <and>
                <not>
                    <available file="${project_dir}/node_modules" type="dir" />
                </not>
                <available file="${output_dir}/${target_layer}/node_modules" type="dir" />
            </and>
            <then>
                <echo>moving node_modules for standard</echo>
                <move todir="${project_dir}/node_modules" >
                    <dirset dir="${output_dir}/${target_layer}/node_modules" />
                </move>
                <antcall target="tool.link">
                    <param name="from.dir" value="${project_dir}/node_modules" />
                    <param name="to.link" value="${output_dir}/${target_layer}/node_modules" />
                </antcall>
            </then>
        </if>
    </target>

    <target name="tool.link">
        <!-- 如果当前不存在，则寻找 node_modules 将其 link 到目标目录 -->
        <if>
            <and>
                <available file="${from.dir}" type="dir" />
                <not>
                    <available file="${to.link}" type="dir" />
                </not>
                <not>
                    <available file="${to.link}" type="file" />
                </not>
            </and>
            <then>
                <echo message="... linking ${from.dir} to ${to.link} ..." />
                <pathconvert property="local-dir" targetos="windows">
                    <path location="${from.dir}" />
                </pathconvert>
                <basename property="linkdir" file="${to.link}" />
                <exec dir="${linkdir}" executable="cmd.exe" osfamily="windows" failonerror="true">
                    <arg line='/c mklink /j node_modules "${local-dir}" ' />
                </exec>
                <exec dir="${linkdir}" executable="/bin/ln" osfamily="unix" failonerror="true">
                    <arg line="-s ${from.dir} ${to.link}" />
                </exec>
                <if>
                    <and>
                        <not>
                            <available file="${to.link}" type="dir" />
                        </not>
                        <not>
                            <available file="${to.link}" type="file" />
                        </not>
                    </and>
                    <then>
                        <fail message="link failure: ${to.link} not exist" />
                    </then>
                </if>
            </then>
            <else>
                <echo message="... link ${from.dir} to ${to.link} ignored!" />
            </else>
        </if>
    </target>

    <target name="tool.removelink">
        <echo message="... remove links from ${from.dir} ..." />
        <pathconvert property="local-dir" targetos="windows">
            <path location="${from.dir}" />
        </pathconvert>
        <exec dir="${from.dir}" outputproperty="symlinks" executable="cmd.exe" osfamily="windows" failonerror="true">
            <arg line='/c dir /A:L /b /s "${local-dir}" ' />
        </exec>
        <exec dir="${from.dir}" outputproperty="symlinks" executable="bash" osfamily="unix" failonerror="true">
            <arg value="-c"/>
            <arg value="find . -type l"/>
        </exec>

        <echo>[${symlinks}]</echo>
        <for list="${symlinks}" delimiter="${line.separator}" param="link" >
            <sequential>
                <if>
                    <istrue value="${is-windows-os}" />
                    <then>
                        <echo>delete symbolic link @{link}</echo>
                        <delete file="@{link}" removeNotFollowedSymlinks="true" verbose="true" />  
                    </then>
                    <else>
                        <echo>delete symbolic link ${from.dir}/@{link}</echo>
                        <delete file="${from.dir}/@{link}" removeNotFollowedSymlinks="true" verbose="true" />                    
                    </else>
                </if>
            </sequential>
        </for>    

    </target>


    <!-- 从生成代码中获取需要的部分，并交给 gen.fix 处理 -->
    <target name="gen.merge" depends="gen.merge.vo, gen.merge.bo, gen.merge.po">
        <echo>merge target!</echo>
    </target>

    <target name="gen.merge.vo" if="${is_vo}">
        <if>
            <isfalse value="${is_vo}" />
            <then>
                <fail message="is_vo == false " />
            </then>
        </if>
        <fail message="assert is_vo=false" unless="is_vo" />

        <echo>copy project files for init</echo>
        <copy todir="${project_dir}" overwrite="false">
            <fileset dir="${output_dir}/${target_layer}">
                <include name="**/*.*" />
                <exclude name="src/main/java/${project_package_dir}/view/service/*.java" />
                <exclude name="*.jdl" />
                <exclude name="*.jh" />
                <exclude name="pom.xml" />
                <exclude name=".yo-rc.json" />
                <exclude name="target/**/*.*" />
                <exclude name="node_modules/**/*.*" />
                <exclude name="src/main/java/${project_package_dir}/view/domain/**/*.*" />
                <exclude name="src/main/java/${project_package_dir}/view/repository/**/*.*" />
                <exclude name="src/main/java/${project_package_dir}/view/aop/**/*.*" />
                <exclude name="src/main/java/${project_package_dir}/view/config/**/*.*" />
                <exclude name="src/main/java/${project_package_dir}/view/util/**/*.*" />
                <exclude name="src/main/java/${project_package_dir}/view/security/**/*.*" />
            </fileset>
        </copy>
        <copy todir="${source_merge_dir}/main/java/${project_package_dir}/" verbose="true" >
            <fileset dir="${output_dir}/${target_layer}/src/main/java/${project_package_dir}/view">
                <include name="security/**/*.*" />
                <!-- CacheConfiguration用 PO 的 -->
                <exclude name="security/CacheConfiguration.java" />
            </fileset>
            <fileset dir="${output_dir}/${target_layer}/src/main/java/${project_package_dir}">
                <include name="view/service/*ViewService.java" />
            </fileset>
        </copy>
        
        <!-- 备份原始pom文件 -->
        <if>
            <not>
                <available file="${project_dir}/pom.origin.xml" />
            </not>
            <then>
                <echo message="备份原始pom文件" />
                <move file="${project_dir}/pom.xml" tofile="${project_dir}/pom.origin.xml" />
                <copy file="${output_dir}/${target_layer}/pom.xml" tofile="${project_dir}/pom.xml" />
                <property name="parent_ref" ><![CDATA[
    <parent>
        <groupId>com.github.powergen</groupId>
        <artifactId>powergen-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../powergen-parent/pom.xml</relativePath>
    </parent> 
                    ]]>
                </property>
                <!-- 替换parent部分内容  -->
                <replaceregexp match="\&lt;parent\&gt;[\w\d\-\&gt;\&lt;\.\r\n\s/]+\&lt;/parent\&gt;" replace="${parent_ref}" flags="gm">
                    <fileset dir="${project_dir}" includes="pom.xml" />
                </replaceregexp>  
                <!-- 修改 groupId 和 artifactId -->
                <replaceregexp match="${project_package}.view" replace="${project_package}" flags="gm">
                    <fileset dir="${project_dir}" includes="pom.xml" />
                </replaceregexp>  
            </then>
        </if>
        <echo message="删除不必要的 View 层文件" />
        <delete verbose="true" >
            <dirset dir="${source_merge_dir}">
                <include name="main/java/${project_package_dir}/view/domain/**" />
                <include name="main/java/${project_package_dir}/view/repository/**" />
                <include name="main/java/${project_package_dir}/view/aop/**" />
                <include name="main/java/${project_package_dir}/view/config/**" />
                <include name="main/java/${project_package_dir}/view/util/**" />
            </dirset>
            <fileset dir="${source_merge_dir}">
                <include name="main/java/${project_package_dir}/view/domain/*.*" />
                <include name="main/java/${project_package_dir}/view/repository/*.*" />
                <include name="main/java/${project_package_dir}/view/aip/**/*.*" />
                <include name="main/java/${project_package_dir}/view/config/**/*.*" />
                <include name="main/java/${project_package_dir}/view/util/*.*" />
                <include name="main/java/${project_package_dir}/view/service/UserService.java" />
                <include name="main/java/${project_package_dir}/view/service/MailService.java" />
                <include name="main/java/${project_package_dir}/view/service/AuditEventService.java" />
            </fileset>
        </delete>
        <!-- 将DTO改成 View对象 -->
        <move todir="${source_merge_dir}" verbose="true" >
            <fileset dir="${source_merge_dir}">
                <include name="main/java/${project_package_dir}/view/service/dto/*ViewDTO.java" />
            </fileset>
            <mapper type="glob" from="*ViewDTO.java" to="*View.java" />
        </move>
    </target>

    <!-- 修复 VO 内部的链接关系，确保没有编译错误 
	*.config.CacheConfiguration.java需要插入关联内容, // jhipster-needle-ehcache-add-entry
	-->
    <target name="gen.fix.vo" if="${is_vo}">
        <!-- 将所有的 View 替换成 Business,同时修改import *.view.domain.*View 转到 *.business.domain.*BO -->
        <replaceregexp match="(\w+)View\b" replace="\1BO" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/view" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="\.view\.domain\.(\w+)BO" replace=".business.domain.\1BO" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/view" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="\.view\.domain\." replace=".business.domain." flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/view" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="\.view\.security\b" replace=".security" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/view" includes="**/*.java" />
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/security" includes="**/*.java" />
        </replaceregexp>
        <!-- 将 ViewDTO 转到 View -->
        <replaceregexp match="(\w+)ViewDTO\b" replace="\1View" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/view" includes="**/*.java" />
        </replaceregexp>
        <!-- 替换 ViewServiceImpl 中的 ViewRepository 转到 BusinessService -->
        <replaceregexp match="(\w+)ViewRepository" replace="\1BOService" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/view" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="\.view\.repository\.(\w+)BOService"
                       replace=".business.service.\1BOService"
                       flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/view" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="\.\w+\.service\.((MailService)|(UserService)|(AuditEventService))\b"
                       replace=".business.service.\1"
                       flags="g">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/view" includes="**/*.java" />
        </replaceregexp>
        <!--  -->
        <!--  -->
        <!--  -->
    </target>

    <target name="gen.merge.bo" if="${is_bo}">
        <echo message="合并 BO 层文件" />
        <copy todir="${source_merge_dir}" verbose="true" >
            <fileset dir="${output_dir}/bo/src">
                <include name="main/java/${project_package_dir}/business/domain/*BO.java" />
                <include name="main/java/${project_package_dir}/business/service/**/*.java" />
                <exclude name="main/java/${project_package_dir}/business/service/dto/*.java" />
            </fileset>
        </copy>
        <copy todir="${source_merge_dir}/main/java/${project_package_dir}" verbose="true" >
            <fileset dir="${output_dir}/bo/src/main/java/${project_package_dir}/business">
                <include name="aop/**/*.java" />
                <include name="config/**/*.java" />
                <include name="util/**/*.java" />
            </fileset>
        </copy>
    </target>

    <!-- 修复 BO 内部的链接关系，确保没有编译错误 -->
    <target name="gen.fix.bo" if="${is_bo}">
        <!-- 装入 CacheConfiguration 中的新内容，然后添加到原来的同名文件中 -->
        <!--
        <loadfile property="bo_config_file"
                  srcfile="${output_dir}/bo/src/main/java/${project_package_dir}/business/config/CacheConfiguration.java">
        </loadfile>
        <propertyregex property="bo_config_code"
                       override="true"
                       input="${bo_config_file}"
                       regexp="User\.class\.getName.+\.persistent.+[\r\n]+([;\w\d\.\r\n\s\*@\(\)\{\}=,\&lt;\&gt;\-\+\&quot;]+)"
                       select="\1"
                       casesensitive="false"
                       global="true" />

        <echo>bo_config_code=[${bo_config_code}]</echo>
        <replaceregexp match="(^\s+// jhipster-needle\-ehcache\-add\-entry\s*$)"
                       replace="${bo_config_code}\1"
                       flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/view/config"
                     includes="CacheConfiguration.java" />
        </replaceregexp>
        -->
        <!-- 替换 BOServiceImpl 中的 BORepository 转到 PORepository -->
        <replaceregexp match="(\w+)BORepository" replace="\1PORepository" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/business" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="\.business\.repository\.(\w+)PORepository"
                       replace=".po.repository.\1PORepository"
                       flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/business" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="\.business\.repository\."
                       replace=".po.repository."
                       flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/business" includes="**/*.java" />
        </replaceregexp>
        <!-- 将所有的 BOMapper 输出对象替换成 PO -->
        <replaceregexp match="(\w+)BO\b" replace="\1PO" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/business">
                <include name="**/*.java" />
                <exclude name="domain/*BO.java" />
            </fileset>
        </replaceregexp>
        <replaceregexp match="\.business\.domain\.(\w+)PO" replace=".po.domain.\1PO" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/business"
                     includes="**/*.java" />
        </replaceregexp>
        <!-- 将 BODTO 转到 BO -->
        <replaceregexp match="(\w+)BODTO\b" replace="\1BO" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/business" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="\.business\.service\.dto\.(\w+)BO" replace=".business.domain.\1BO" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/business/service"
                     includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="\.business\.service\.dto\.UserDTO" replace=".view.service.dto.UserDTO" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/business/service"
                     includes="**/*.java" />
        </replaceregexp>
        <!-- 在mapper里投机取巧一下，将BO的import替换成PO -->
        <replaceregexp match="\.business\.domain\.(\w+)BO" replace=".po.domain.\1PO" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/business/service/mapper"
                     includes="**/*.java" />
        </replaceregexp>
        <!-- 修改 aspect 里的参数饮用 -->
        <replaceregexp match=".business.repository." replace=".po.repository" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/aop"
                     includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match=".business.web." replace=".view.web." flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/aop"
                     includes="**/*.java" />
        </replaceregexp>
   
        
    </target>

    <target name="gen.merge.po" if="${is_po}">
        <echo message="合并 PO 层文件" />
        <copy todir="${source_merge_dir}" verbose="true" >
            <fileset dir="${output_dir}/po/src">
                <include name="main/java/${project_package_dir}/po/repository/*.java" />
                <include name="main/java/${project_package_dir}/po/domain/*.java" />
            </fileset>
        </copy>
        <copy todir="${source_merge_dir}/main/java/${project_package_dir}" verbose="true" >
            <fileset dir="${output_dir}/po/src/main/java/${project_package_dir}/po">
                <include name="config/CacheConfiguration.java" />
            </fileset>
        </copy>
    </target>

    <!-- 修复 PO 内部的链接关系，确保没有编译错误 -->
    <target name="gen.fix.po" if="${is_po}">
        
    </target>

    <!-- 修复文件内部的链接关系，完成 vo-bo-po 的关联，确保没有编译错误 -->
    <target name="gen.fix" depends="gen.fix.vo, gen.fix.bo, gen.fix.po">
        <!-- 修复因为移动导致的package问题 -->
        <replaceregexp match="${project_package}\.\w+\.aop\b" replace="${project_package}.aop" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="${project_package}\.\w+\.config\b" replace="${project_package}.config" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="${project_package}\.\w+\.util\b" replace="${project_package}.util" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}" includes="**/*.java" />
        </replaceregexp>
        <!-- 修复 User， Authority 等几个预定义对象的饮用 -->
        <replaceregexp match="${project_package}\.\w+\.(\w+)\.User(Repository)?\b" replace="${project_package}.po.\1.User\2" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="${project_package}.\w+.domain.Authority" replace="${project_package}.po.domain.Authority" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="${project_package}\.\w+\.(\w+)\.PersistentToken(Repository)?\b" replace="${project_package}.po.\1.PersistentToken\2" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="${project_package}\.\w+\.security\." replace="${project_package}.security." flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}" includes="**/*.java" />
        </replaceregexp>
        <replaceregexp match="${project_package}\.\w+\.domain\.PersistentAuditEvent" replace="${project_package}.po.domain.PersistentAuditEvent" flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}" includes="**/*.java" />
        </replaceregexp>
        <!-- 处理 config Constants 的引用 -->
        <replaceregexp match="${project_package}\.\w+\.config\." replace="${project_package}.config." flags="gm">
            <fileset dir="${source_merge_dir}/main/java/${project_package_dir}/" includes="**/*.java" />
        </replaceregexp>
    </target>

    <!-- 从文件内部提取自定义符号，提升数据转换的灵活性 -->
    <target name="gen.improve">
    </target>

</project>